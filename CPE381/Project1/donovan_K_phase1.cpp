/*CPE 381 Project 1 phase 1
c++ program to add random noise to WAV file
generated by the MATLAB script

Kevin Donovan
March 4, 2020*/

#include <chrono>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <iostream>
#include <istream>
#include <string>
#include <typeinfo>

using namespace std;

struct wavHeader {
	char   chunkId[4];
  char   format[4];
  char   subChunk1Id[4];
  char   subChunk2Id[4];
  int    byteRate;
	int    chunkSize;
	int    sampleRate;
	int    subChunk1Size;
  int    subChunk2Size;
	short  audioFormat;
  short  bitsPerSample;
  short  blockAlign;
	short  numChannels;
};

int main(int argc, char *argv[]) {
	//program needs to be able to open a file from the command line
	string input;
	string output;
	string summary;

	input = argv[1];
	output = argv[2];
	summary = argv[3];

	// sets variable for the current Time
	// value is used for execution
	auto start = chrono::high_resolution_clock::now();

	wavHeader header;				// Create an instance of the struct
	int16_t data;
	long i;
	long j;
	float t = 0.0;
	long maxAbsVal = 0;
	int maxIntVal = 32767;
	short n;

	FILE *inputFilePtr;
	FILE *outputFilePtr;
	FILE *summaryFilePtr;

	//error checking for input and output files
	if (!(inputFilePtr = fopen(input.c_str(), "r"))) {
    cout << "The nme of your input file is invalid" << endl;
    return 0;
	}

	if (!(outputFilePtr = fopen(output.c_str(), "w"))) {
    cout << "The name of your output file is invalid" << endl;
    return 0;
	}

	if (!(summaryFilePtr = fopen(summary.c_str(), "w"))) {
    cout << "The name of your summary file is invalid" << endl;
    return 0;
	}

	//Take in data to formulate wave header
	fread(&header, sizeof(header), 1, inputFilePtr);
	fwrite(&header, sizeof(header), 1, outputFilePtr);

	//Read given data from file
  //Process wave file and write new file with altered sound
	while (!feof(inputFilePtr)) {
		t = t + (1.0f / header.sampleRate);
		fread(&data, (header.bitsPerSample/8), 1, inputFilePtr);
		if (abs(data) > maxAbsVal) {
			maxAbsVal = abs(data);
		}

		//Same way we did in the matlab file, create the necessary noise
		short n = 0.1*short(maxIntVal*sin(2.0f*M_PI*2000*t));
		//Using the random function, create a random sound to use
		short rn = 0.05*short((rand()% maxIntVal)*2- maxIntVal);
		data = data + n + rn;
		//audiowrite to the new file
		fwrite(&data, (header.bitsPerSample/8), 1, outputFilePtr);
	}

	//same way we did with the start time, we need to take in the end time
	auto end = chrono::high_resolution_clock::now();
	int sampleLength = (header.subChunk2Size/4)/header.sampleRate;
	auto executionTime = chrono::duration_cast<chrono::milliseconds>(end-start);

	//How to write to the summary file
	fprintf(summaryFilePtr, "File Names: ");
	fprintf(summaryFilePtr, "	Input WAV File Name: %s\n", input.c_str());
	fprintf(summaryFilePtr, "	Output WAV File Name: %s\n", output.c_str());
	fprintf(summaryFilePtr, "	Summary File Name: %s\n", summary.c_str());
	fprintf(summaryFilePtr, "Sampling Frequency: %d\n", header.sampleRate);
	fprintf(summaryFilePtr, "Number of Channels: %d\n", header.numChannels);
	fprintf(summaryFilePtr, "Number of Bits/Sample: %d\n", header.bitsPerSample);
	fprintf(summaryFilePtr, "Length in Seconds: %d\n", sampleLength);
	fprintf(summaryFilePtr, "Maximum Absolute Value of Sample: %ld\n", maxAbsVal);
	fprintf(summaryFilePtr, "Execution Time: %dms\n", executionTime);

	if (fclose(inputFilePtr)) {
    cout << "The input file has failed to close" << endl;
    return 0;
	}

	if (fclose(outputFilePtr)) {
    cout << "The output file has failed to close" << endl;
    return 0;
	}

	if (fclose(summaryFilePtr)) {
    cout << "The summary file has failed to close" << endl;
    return 0;
	}

	return 0;
}
